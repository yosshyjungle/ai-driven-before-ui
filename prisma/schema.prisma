// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id // ClerkのユーザーIDを使用
  email       String   @unique
  firstName   String?
  lastName    String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // ブログ投稿とのリレーション
  posts       Post[]
  // お気に入りとのリレーション
  favorites   Favorite[]
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  imageUrl    String?  // 画像URLフィールドを追加
  date        DateTime @default(now())
  userId      String?  // 作成者のClerk User ID
  
  // ユーザーとのリレーション
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  // お気に入りとのリレーション
  favorites   Favorite[]
  // タグとのリレーション
  postTags    PostTag[]
}

// お気に入り機能のためのテーブル
model Favorite {
  id     Int    @id @default(autoincrement())
  userId String
  postId Int
  createdAt DateTime @default(now())
  
  // リレーション
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  // 複合ユニーク制約（同じユーザーが同じ投稿を複数回お気に入りできないようにする）
  @@unique([userId, postId])
}

// タグ機能のためのテーブル
model Tag {
  id       Int    @id @default(autoincrement())
  name     String @unique
  color    String @default("#3B82F6") // デフォルトの色
  createdAt DateTime @default(now())
  
  // 投稿とのリレーション
  postTags PostTag[]
}

// 投稿とタグの中間テーブル
model PostTag {
  id     Int @id @default(autoincrement())
  postId Int
  tagId  Int
  
  // リレーション
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  // 複合ユニーク制約（同じ投稿に同じタグを複数回付けられないようにする）
  @@unique([postId, tagId])
}
